<%- include("../../partials/header.ejs") %>
<%- include("../../partials/loggedInNav.ejs") %>

<div class="mt-5">
    <br>
</div>
<div class="jumbotron mt-5">
    <div class="container">
      <h1 class="display-3">Object Orientation</h1>
      <p>&nbsp&nbspSo here we are at lesson 2.  This is a bit more advanced as last week was pretty boring.  Lets get into a bit more of what this language is about.  Object orientation is 
        a very important concept, so be sure to pay close attention.
      </p>
      <p>This does nothing Maybe hook it up later<a class="btn btn-primary btn-lg" href="#" role="button">to home &raquo;</a></p>
    </div>
  </div>
  <div class="container">
    <hr>
    <img src="/images/javaImages/super-class.png" class="img-fluid" alt="create class">
    <hr>
    &nbsp&nbspOk so look at this class.  Pretty simple.  So what if we wanted to make another version of this class that 
    was a bit different but still kind of the same.  This is what inheritance is.  If you look at the class just below this you will see that 
    we take the existing class and add to it to make it more complicated.  Think of it as lets say a hambuger then it can become a cheese burger.  
    The same but with more stuff added to it.
    <hr>
    <img src="/images/javaImages/sub-class.png" class="img-fluid" alt="create class">
    <hr>
    <h2>Methods</h2>
    <hr>
    <img src="/images/javaImages/regular_override.png" class="img-fluid" alt="create class">
    <hr>
    &nbsp&nbspWith every class there is the potential to create methods that go with it.  For now methods are just functions that are used to perform operations for the class. 
    With that description there is no real point to have it part of the class.  To make this different we can override them to make the code more organized.  In the picture above 
    we take a method and make some changes to it to have it work a bit differently just like we did with the classes.  This is method overriding.
    <hr>
    <img src="/images/javaImages/override_toString.png" class="img-fluid" alt="create class">
    <hr>
    &nbsp&nbspThe above code snippet is a bit different.  You may have noticed the System.out.println stuff.  This is a method that is built into the language in some module 
    The toString method is much like this.  These are also overridable.  When we do this, this is how we do it, with the @ symbol.  The rest is the same.  The importance here is one that 
    you can do this but that with the toString you can then make it very easy to format stuff and print it in various places.  See if you can figure out ways.  Next lesson I will explain this more.
</div> 